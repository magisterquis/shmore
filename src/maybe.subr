# maybe.subr
# Maybe don't run tests, or maybe run them differently
# By J. Stuart McMurray
# Created 20241112
# Last Modified 20250311

# tap_BAIL_OUT ceases all testing and returns 255 after emitting the bail out
# TAP message.  It should normally be called as return tap_BAIL_OUT.  After
# calling tap_BAIL_OUT, further calls to most tap_ functions will do nothing,
# the two exceptionsg being tap_done_testing, which will return
# TAP_RETURN_BAILED_OUT and tap_reset, which resets the TAP state.
#
# Arguments:
# $1 - The reason for the bail (optional)
tap_BAIL_OUT() {
        _tap_bailo="Bail out!"
        if [ -n "$1" ]; then
                _tap_bailo="${_tap_bailo}  ${*:-""}"
        fi
        echo "${_tap_bailo}"
        return $TAP_RETURN_BAILED_OUT
}

# tap_skip is equivalent to a number of tap_ok 0's, plus some TAP which notes
# that the tests were skipped, not actually run.  This is handy for when
# tap_plan has been used to declare a number of tests, but several are unable
# to be run at all, probably in a subtest.  Note that this is different than
# tap_todo, which is used for tests which are expected to run but fail.
#
# Arguments:
# $1 - The reason for the tests to be skipped
# $2 - How many tests will be skipped
tap_skip() { _tap_skip 0 "skip $1" "$2"; }

# tap_todo_skip is like tap_skip except that the tests are marked as failing
# and noted as not only skipped but also TODO.
#
# Arguments
#
# $1 - The reason for the tests to be skipped
# $2 - How many tests will be skipped
tap_todo_skip() {
        _TAP_OK_NONOTOKDIAG=true _tap_skip 1 "TODO & SKIP $1" "$2";
        # We didn't actually fail.  Whoops.
        : $((_tap_nfail-=$2))
}

# _tap_skip calls _tap_ok a number of times with the separator #
#
# Arguments:
# $1 - 0 for success
# $2 - Test name, which should include skip or TODO & SKIP
# $3 - Repetition count
_tap_skip() {
        # Need a count and a reason
        if [ 3 -gt $# ]; then
                echo "Not enough arguments" >&2
                return $TAP_RETURN_NOT_ENOUGH_ARGUMENTS
        fi

        # Print ALL the skips.  Turns out OpenBSD's sh doesn't do POSIX loops?
        i=1
        _tap_todo_orig=$TAP_TODO
        _tap_ok_separator_orig=${_TAP_OK_SEPARATOR}
        while [ $i -le $3 ]; do
                TAP_TODO= _TAP_OK_SEPARATOR="#" _tap_ok $1 "$2"
                : $((i+=1))
        done
        TAP_TODO=${_tap_todo_orig}
        _TAP_OK_SEPARATOR=${_tap_ok_separator_orig}
}

# vim: ft=sh
