# echo.subr
# Print helpful messages
# By J. Stuart McMurray
# Created 20241109
# Last Modified 20250513

# _tap_echo is like echo, but prepends ${_tap_space} to the message, for
# easier subtests.
_tap_echo() { /bin/echo "${_tap_space}${*:-""}"; }

# tap_diag prints a diagnostic message similar to echo but will not interfere
# with test output.  Similar to echo, arguments are joined with spaces.  Output
# is sent to stderr.
tap_diag() { tap_note "${@:-""}" >&2; }

# Like tap_diag, but by default the message will not be seen when the test is
# run in a harness.  Output is sent to stdout.
tap_note() {(
        # If we've got no real arguments, emit nothing
        if [ -z "${*:-""}" ]; then
                return
        fi
        # Print each line.
        (
                _tap_lines="$*"
                while ! [ -z "$_tap_lines" ]; do
                        # Hokey, but it works
                        _tap_echo "# ${_tap_lines%%
*}"
                        _tap_lines_prev=${_tap_lines}
                        _tap_lines="${_tap_lines#*
}"
                        if [ "${_tap_lines_prev}" = "${_tap_lines}" ]; then
                                break
                        fi
                done
        )
)}

# vim: ft=sh
