# plan.subr
# Test plan
# By J. Stuart McMurray
# Created 20241105
# Last Modified 20250308

# TAP_TODO, if set, notes that tests are expected to fail.  Output will include
# a flag indicating the tests are TODO for test harness bookkeeping.
# Surrounding a group of tests in TAP_TODO=... / TAP_TODO= makes for a
# practical TODO list; as each TODO test is done, move it outside the TAP_TODO
# lines.
TAP_TODO=${TAP_TODO:-""}

# TAP_NOTRAP, if set to a non-empty string, causes tap_done_testing to not
# be the EXIT trap.  This is handy for scripts which already use the EXIT trap
# or for using shmore in functions inside a script.
TAP_NOTRAP=${TAP_NOTRAP:-""}

# Return values.
TAP_RETURN_MAX_FAIL=240
TAP_RETURN_INVALID_OPERATOR=241
TAP_RETURN_NOT_ENOUGH_ARGUMENTS=242
TAP_RETURN_PLAN_ALREADY_PRINTED=243
TAP_RETURN_WRONG_TEST_COUNT=244
TAP_RETURN_NO_SUBTESTS_RUN=245
TAP_RETURN_SKIPPED_ALL=246
TAP_RETURN_BAILED_OUT=255

# This all works until we run multi-threaded.
_tap_bailo=
_tap_doner=
_tap_nfail=0
_tap_nplan=0
_tap_ntest=0
_tap_skipa=
_tap_space=

# These are only used by _tap_ok but are set here for set -u.
_TAP_OK_NONOTOKDIAG=
_TAP_OK_SEPARATOR=

# tap_reset resets shmore's internal state to the same state as before any
# tests are run.  It doesn't touch the EXIT trap, though.  This is useful for
# running tests in functions, and not in a standalone script.
tap_reset() {
        TAP_TODO=
        _TAP_OK_NONOTOKDIAG=
        _TAP_OK_SEPARATOR=
        _tap_bailo=
        _tap_doner=
        _tap_nfail=0
        _tap_nplan=0
        _tap_ntest=0
        _tap_skipa=
        _tap_space=
}

# tap_done_testing is used to note the end of testing.  It emits a plan if none
# was set via tap_plan and emits information about the testing itself.
# If tap_plan has already been called, tap_done_testing serves as a final,
# redundant test to check if all the tests were run and can be used instead of
# tap_plan if the number of tests isn't known ahead of time.  It does
# significantly less than Test::More::done_testing but is somewhat gentler.
#
# The number of failed tests is returned unless an error is encountered, in
# which case one of the TAP_RETURN_* constants is returned instead.  This may
# be a problem with set -e.  Use ||: to get around this.
#
# tap_done_testing will be registered as the EXIT trap action unless
# $TAP_NOTRAP is a non-empty string.
#
# No arguments.
tap_done_testing() {
        # Grab the original exit status.  If this isn't 0, we'll return it
        # if we would have otherwise had a successful exit for in case
        # we trapped a syntax error or something along those lines.
        _tap_oret=$?

        # Nothing to do here if we bailed.
        if [ -n "${_tap_bailo}" ]; then
                return $TAP_RETURN_BAILED_OUT
        fi

        # Idempotency
        if [ -n "${_tap_doner}" ]; then
                return ${_tap_doner}
        fi

        # Default exit status is the number of failed tests, capped at 250.
        _tap_doner=${_tap_nfail}
        if [ "$TAP_RETURN_MAX_FAIL" -lt "${_tap_doner}" ]; then
                _tap_doner=$TAP_RETURN_MAX_FAIL
        fi
        # Make sure we ran the right amount of tests.
        if [ 0 -ne ${_tap_nplan} ] && [ ${_tap_nplan} -ne ${_tap_ntest} ]; then
                tap_ok 1 "planned to run ${_tap_nplan} but \
done_testing() expects ${_tap_ntest}" "$0" ${LINENO:-""}
                _tap_doner=${_tap_nfail}
        fi

        # Print a couple more messages, if need be.
        _tap_finalize

        # If all went well in TAP-land, we'll use the shell's exit status in
        # case there was a syntax error or something equally unhappy and the
        # shell told us about it.
        if [ 0 -eq ${_tap_doner} ]; then
                _tap_doner=${_tap_oret}
        fi

        # If we're still all happy, don't specify a return value.  Some shells
        # use this to preserve the EXIT trap's return code, especially when
        # $? wasn't set at the top of the function.
        if [ 0 -eq ${_tap_doner} ]; then
                return
        fi

        return ${_tap_doner}
}
if [ -z "$TAP_NOTRAP" ]; then
        # Apparently zsh doesn't use the last exit status as its exit status
        # like EVERY OTHER SHELL.  Turns out ksh93 is just as bad.
        trap 'tap_done_testing || exit $?' EXIT
fi

# _tap_finalize does a few checks to make sure we've run everything we said
# we would.  It returns nonzero if we failed a test or got the wrong number
# of tests.
_tap_finalize() {
        # If we didn't make a plan, assume we ran as many tests as we
        # should have.
        if [ -z "${_tap_skipa}" ] &&
                [ 0 -eq ${_tap_nplan} ] && [ 0 -ne ${_tap_ntest} ]; then
                tap_plan ${_tap_ntest}
        fi
        # Note if we didn't run enough tests.
        _tap_qualifier=
        if [ ${_tap_nplan} -ne ${_tap_ntest} ]; then
                _tap_qualifier=" run"
                _tap_s=
                if [ 1 -ne ${_tap_nplan} ]; then
                        _tap_s=s
                fi
                tap_diag "Looks like you planned ${_tap_nplan} test${_tap_s} \
but ran ${_tap_ntest}."
        fi
        # Note if we failed tests.
        if [ 0 -ne ${_tap_nfail} ]; then
                _tap_s=
                if [ 1 -ne ${_tap_nfail} ]; then
                        _tap_s=s
                fi
                tap_diag "Looks like you failed ${_tap_nfail} test${_tap_s} \
of ${_tap_ntest}${_tap_qualifier}." >&2
        fi

        # Return indicates if all tests passed.
        if [ 0 -ne ${_tap_nfail} ]; then
                return ${_tap_nfail}
        elif [ ${_tap_nplan} -ne ${_tap_ntest} ]; then
                return 1
        fi
        return 0
}

# tap_plan prints the number of tests we expect.  Specifying 0 subtests lets a
# test harness know the script or subtest will be skipped, similar to
# tap_skip or Test::More's skip_all, but does not exit the script or function.
#
# Arguments:
# $1 - The number of tests which should be run, or 0 to skip testing
# $2 - If $1 is 0, the reason for skipping testing
tap_plan() {
        # Don't do anything if we've bailed.
        if [ -n "${_tap_bailo}" ]; then
                return
        fi

        # Need a count
        if [ 0 -eq $# ]; then
                echo "Not enough arguments" >&2
                return $TAP_RETURN_NOT_ENOUGH_ARGUMENTS
        fi
        # Don't double-call
        if [ 0 -ne "${_tap_nplan}" ]; then
                echo "Plan already printed" >&2
                return $TAP_RETURN_PLAN_ALREADY_PRINTED
        fi
        # Work out how many tests we're signing ourselves up for
        _tap_nplan=$(($1))
        _tap_plan_msg="1..${_tap_nplan}"
        if [ 0 -eq ${_tap_nplan} ]; then
                _tap_skipa=${2:-"???"}
                _tap_plan_msg="${_tap_plan_msg} # SKIP ${_tap_skipa}"
        fi
        _tap_echo "${_tap_plan_msg}"
}

# vim: ft=sh
