# subtest.subr
# Test plan
# By J. Stuart McMurray
# Created 20241105
# Last Modified 20250301

# tap_subtest runs a subtest, which should normally be its own function
# i.e. mysubtest() { tap_... }; tap_subtest "foo" mysubtest.
# The subtest function should return 0 on success.
# See examples/subtest.sh for an example.
#
# $1 - Subtest name for TAP output
# $2 - Subtest function name
# $3 - Test file (optional)
# $4 - Test line (optional)
tap_subtest() {
        # Don't do anything if we've bailed.
        if [ -n "${_tap_bailo}" ]; then
                return
        fi

        # Make sure we have at least a test and a name.
        if [ 2 -gt $# ]; then
                echo "Need a subtest and a test name" >&2
                return $TAP_RETURN_NOT_ENOUGH_ARGUMENTS
        fi

        # Note we're running a subtest
        tap_note "Subtest: $1"

        # Run the subtest with extra spaces
        _tap_subtest_ret=0
        (
                _tap_save_space=${_tap_space}
                _tap_save_ntest=${_tap_ntest}
                tap_reset
                _tap_space="    ${_tap_save_space}"
                _tap_save_space=
                eval "$2" || :
                # Nothing to do after bailing
                if [ -n "${_tap_bailo}" ]; then
                        exit $TAP_RETURN_BAILED_OUT
                # We log the skip_all pass/fail here because communicating
                # out of the subshell is more trouble than its worth
                elif [ -n "${_tap_skipa}" ]; then
                        _tap_space="${_tap_save_space}"
                        _tap_ntest="${_tap_save_ntest}"
                        tap_skip "${_tap_skipa}" 1
                        return $TAP_RETURN_SKIPPED_ALL
                # If we didn't run any tests at all let someone know.
                elif [ 0 -eq ${_tap_ntest} ]; then
                        _tap_echo "1..0"
                        tap_diag "No tests run!"
                        exit $TAP_RETURN_NO_SUBTESTS_RUN
                fi
                set +e
                _tap_finalize
                [ 0 -eq $? ]
        ) || _tap_subtest_ret=$?

        # If we've bailed, note it for the rest of testing.  There's no really
        # good way to pass things back from subshells.
        if [ -z "$_tap_bailo" ] && \
                [ $TAP_RETURN_BAILED_OUT -eq ${_tap_subtest_ret} ]; then

                _tap_bailo="Bailed in subtest $2"
                return
        # A skipped_all subtest already logged its own success or failure; we
        # just need to note that another test was run.
        elif [ $TAP_RETURN_SKIPPED_ALL -eq ${_tap_subtest_ret} ]; then
                : $((_tap_ntest+=1))
                return
        # If we didn't get any subtests, note it as an error.
        elif [ $TAP_RETURN_NO_SUBTESTS_RUN -eq ${_tap_subtest_ret} ]; then
                tap_ok 1 "No tests run for subtest "'"'"$1"'"' "$3" "$4"
                return
        fi

        # Emit the ok/not ok message and note success/fail.
        tap_ok "${_tap_subtest_ret}" "$1" "$3" "$4"
}

# vim: ft=sh
